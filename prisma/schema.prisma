generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model order_items {
  order_id   String      @db.Uuid
  product_id String      @db.Uuid
  quantity   Decimal?    @default(1) @db.Decimal
  in_stock   row_status?
  orders     orders      @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  products   products    @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([order_id, product_id])
}

model orders {
  order_id                      String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_by                      String?       @db.Uuid
  order_for                     String?       @db.Uuid
  created_on                    DateTime?     @default(now()) @db.Timestamp(6)
  status                        order_status?
  users_orders_order_byTousers  users?        @relation("orders_order_byTousers", fields: [order_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_orders_order_forTousers users?        @relation("orders_order_forTousers", fields: [order_for], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  order_items                   order_items[]
}

model products {
  product_id    String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  product_name  String        @db.VarChar(200)
  product_price Decimal?      @default(0) @db.Decimal
  created_by    String?       @db.Uuid
  status        row_status?
  users         users?        @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_created_by")
  order_items   order_items[]
}

model schema_migrations {
  version BigInt  @id
  dirty   Boolean
}

model users {
  user_id                        String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                       String      @unique @db.VarChar(100)
  password                       String      @db.VarChar(100)
  type                           user_type?
  created_at                     DateTime?   @default(now()) @db.Timestamp(6)
  updated_at                     DateTime?   @default(now()) @db.Timestamp(6)
  status                         row_status?
  orders_orders_order_byTousers  orders[]    @relation("orders_order_byTousers")
  orders_orders_order_forTousers orders[]    @relation("orders_order_forTousers")
  products                       products[]
}

enum order_status {
  pending
  cancelled
  inprogress
  served
}

enum row_status {
  active
  inactive
}

enum user_type {
  buyer
  seller
}
